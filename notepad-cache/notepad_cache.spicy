module Notepad_Cache;

import spicy;
import UTF16 from unicode;
%byte-order=spicy::ByteOrder::Big;

# This doesn't support 128bit values... only 64bit. :(
type uLEB128 = unit {
    var xresult: uint64 = 0;
    var shift_width: uint16 = 0;

    : uint8[] &until-including=(($$ & 0x80) == 0) foreach {
        self.xresult += (cast<uint64>($$ & 0x7F) << self.shift_width);
        self.shift_width += 7;
    }
} &convert=self.xresult;

type uLEB128_Timestamp = unit {
    x: uLEB128;
} &convert=(time_ns((self.x-(11644473600 * 10000000))*100));

type OneByteBool = unit {
    x: uint8;
} &convert=(self.x==0 ? False : True);

type Encodings = enum {
    ANSI = 0x01,
    UTF_16LE = 0x02,
    UTF_16BE = 0x03,
    UTF_8BOM = 0x04,
    UTF_8 = 0x05,
};

type LineEndings = enum {
    CRLF = 0x01,
    CR = 0x02,
    LF = 0x03,
};

type ConfigBlock = unit {
    word_wrap: OneByteBool;
    rtl: OneByteBool;
    show_unicode: OneByteBool;
    version: uLEB128;
    unknown: uint16;
};

type UnsavedChunk = unit {
    cursor_position: uLEB128;
    deletion_number: uLEB128;
    addition_number: uLEB128;
    chars: UTF16::String(spicy::ByteOrder::Little) &size=(self.addition_number*2) {
        # Note how far into the input stream we currently are...
        self.crc_data_len = self.offset();
    }
    var crc_data_len: uint64;
    : bytes &size=self.crc_data_len &parse-at=self.input() {
        self.calculated_crc32 = spicy::crc32_add(spicy::crc32_init(), $$);
    }
    # Ok, now we're caught back to to where we were in the input stream...
    crc32: uint32 {
        self.valid_checksum = (self.calculated_crc32 == $$);
    }
    var calculated_crc32: uint64;
    var valid_checksum: bool;
};

public type File = unit {
    header: b"NP\x00" &synchronize;
    saved: OneByteBool;
    if ( self.saved ) {
        path_length:  uLEB128;
        path:         UTF16::String(spicy::ByteOrder::Little) &size=(self.path_length*2);
        file_size:    uLEB128;
        encoding:     uint8 &convert=Encodings($$);
        line_endings: uint8 &convert=LineEndings($$);
        last_write:   uLEB128_Timestamp;
        sha256:       bytes &size=32 &convert=spicy::bytes_to_hexstring($$);
        unknown1:     uint8;
    }

    unknown2:        uint8;
    selection_start: uLEB128;
    selection_end:   uLEB128;
    config_block:    ConfigBlock;
    content_length:  uLEB128;
    content:         UTF16::String(spicy::ByteOrder::Little) &size=(self.content_length*2);
    has_unsaved:     OneByteBool {
        self.crc_data_len = self.offset()-3;
    }
    var crc_data_len: uint64;
    : bytes &size=self.crc_data_len &parse-at=(self.input()+3) {
        self.calculated_crc32 = spicy::crc32_add(spicy::crc32_init(), $$);
    }
    crc32: uint32 {
        self.valid_checksum = (self.calculated_crc32 == $$);
    }
    var calculated_crc32: uint64;
    var valid_checksum: bool;

    unsaved_chunks:  UnsavedChunk[] &eod;
};